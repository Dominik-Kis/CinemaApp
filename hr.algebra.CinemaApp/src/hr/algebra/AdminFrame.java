/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.algebra;

import hr.algebra.dal.Repository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.model.Movie;
import hr.algebra.model.MovieArchive;
import hr.algebra.model.MovieTableModel;
import hr.algebra.model.Person;
import hr.algebra.model.PersonTransferable;
import hr.algebra.rss.MovieParser;
import hr.algebra.utils.FileUtils;
import hr.algebra.utils.IconUtils;
import hr.algebra.utils.JAXBUtils;
import hr.algebra.utils.MessageUtils;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.text.ParseException;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.DropMode;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.ListSelectionModel;
import javax.swing.TransferHandler;
import javax.swing.text.JTextComponent;
import javax.xml.bind.JAXBException;
import javax.xml.stream.XMLStreamException;

/**
 *
 * @author GamerGruft
 */
public class AdminFrame extends javax.swing.JFrame {

    private static final String FILENAME = "moviearchive.xml";
    private List<JTextComponent> validationFields;
    private List<JLabel> errorLabels;
    
    private Movie selectedMovie;
    private Person selectedPerson;
    private Person selectedActor;
    private Person selectedDirector;
    
    private MovieTableModel movieModel;
    private DefaultListModel<Person> actorsModel;
    private DefaultListModel<Person> directorsModel;
    private DefaultListModel<Person> personsModel;
    private Repository repository;
    private Set<Person> directorsToAdd;
    private Set<Person> actorsToAdd;
    
    private static final String DEFAULT_PICTURE_PATH = "src/hr/algebra/assets/no_image.png";
    
    /**
     * Creates new form AdminFrame
     */
    public AdminFrame() {
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        listDirectors = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        listPersons = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        listActors = new javax.swing.JList<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtDescription = new javax.swing.JTextArea();
        btnAddPerson = new javax.swing.JButton();
        btnDeletePerson = new javax.swing.JButton();
        btnUpdatePerson = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        lblPic = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        txtTitle = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        lblErrorTitle = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        txtOrgTitle = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        lblErrorOrgTitle = new javax.swing.JLabel();
        jPanel17 = new javax.swing.JPanel();
        txtPubDate = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        lblErrorPubDate = new javax.swing.JLabel();
        jPanel18 = new javax.swing.JPanel();
        txtGenre = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        lblErrorGenre = new javax.swing.JLabel();
        jPanel19 = new javax.swing.JPanel();
        txtDuration = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        lblErrorDuration = new javax.swing.JLabel();
        jPanel21 = new javax.swing.JPanel();
        txtPicPath = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        btnChoose = new javax.swing.JButton();
        jLabel27 = new javax.swing.JLabel();
        lblErrorPicPath = new javax.swing.JLabel();
        btnClear = new javax.swing.JButton();
        jPanel20 = new javax.swing.JPanel();
        jLabel25 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tableMovies = new javax.swing.JTable();
        btnDeleteMovie = new javax.swing.JButton();
        btnUpdateMovie = new javax.swing.JButton();
        btnAddMovie = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        menuDownlaodDB = new javax.swing.JMenuItem();
        menuClearDB = new javax.swing.JMenuItem();
        menuDownlaodXML = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("AdminFrame");

        listDirectors.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listDirectors.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listDirectorsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(listDirectors);

        listPersons.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listPersons.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listPersonsMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(listPersons);

        listActors.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listActors.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listActorsMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(listActors);

        jScrollPane4.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        txtDescription.setColumns(20);
        txtDescription.setLineWrap(true);
        txtDescription.setRows(5);
        jScrollPane4.setViewportView(txtDescription);

        btnAddPerson.setText("Add");
        btnAddPerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddPersonActionPerformed(evt);
            }
        });

        btnDeletePerson.setText("Delete");
        btnDeletePerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeletePersonActionPerformed(evt);
            }
        });

        btnUpdatePerson.setText("Update");
        btnUpdatePerson.setToolTipText("");
        btnUpdatePerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdatePersonActionPerformed(evt);
            }
        });

        jLabel1.setText("Actors");

        jLabel2.setText("Persons");

        jLabel3.setText("Directors");

        jLabel4.setText("Desciption");

        lblPic.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hr/algebra/assets/no_image.png"))); // NOI18N

        jLabel5.setText("Title");

        lblErrorTitle.setForeground(java.awt.Color.red);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblErrorTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtTitle))
                .addGap(0, 0, 0))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(lblErrorTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addComponent(txtTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabel8.setText("Original title");

        lblErrorOrgTitle.setForeground(java.awt.Color.red);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblErrorOrgTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtOrgTitle))
                .addGap(0, 0, 0))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblErrorOrgTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(txtOrgTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabel22.setText("Published date");

        lblErrorPubDate.setForeground(java.awt.Color.red);

        javax.swing.GroupLayout jPanel17Layout = new javax.swing.GroupLayout(jPanel17);
        jPanel17.setLayout(jPanel17Layout);
        jPanel17Layout.setHorizontalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel17Layout.createSequentialGroup()
                        .addComponent(jLabel22)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblErrorPubDate, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtPubDate))
                .addGap(0, 0, 0))
        );
        jPanel17Layout.setVerticalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblErrorPubDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(txtPubDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabel23.setText("Genre");

        lblErrorGenre.setForeground(java.awt.Color.red);

        javax.swing.GroupLayout jPanel18Layout = new javax.swing.GroupLayout(jPanel18);
        jPanel18.setLayout(jPanel18Layout);
        jPanel18Layout.setHorizontalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel18Layout.createSequentialGroup()
                        .addComponent(jLabel23)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblErrorGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtGenre))
                .addGap(0, 0, 0))
        );
        jPanel18Layout.setVerticalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel23)
                    .addComponent(lblErrorGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(txtGenre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabel24.setText("Duration");

        lblErrorDuration.setForeground(java.awt.Color.red);

        javax.swing.GroupLayout jPanel19Layout = new javax.swing.GroupLayout(jPanel19);
        jPanel19.setLayout(jPanel19Layout);
        jPanel19Layout.setHorizontalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel19Layout.createSequentialGroup()
                        .addComponent(jLabel24)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblErrorDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtDuration))
                .addGap(0, 0, 0))
        );
        jPanel19Layout.setVerticalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel24, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblErrorDuration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0)
                .addComponent(txtDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5))
        );

        jLabel26.setText("Picture path");

        btnChoose.setText("Choose");
        btnChoose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseActionPerformed(evt);
            }
        });

        lblErrorPicPath.setForeground(java.awt.Color.red);

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel21Layout = new javax.swing.GroupLayout(jPanel21);
        jPanel21.setLayout(jPanel21Layout);
        jPanel21Layout.setHorizontalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel21Layout.createSequentialGroup()
                .addComponent(jLabel26)
                .addGap(95, 95, 95)
                .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(lblErrorPicPath, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 269, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel21Layout.createSequentialGroup()
                .addComponent(txtPicPath)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnChoose)
                .addGap(0, 0, 0)
                .addComponent(btnClear))
        );
        jPanel21Layout.setVerticalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel21Layout.createSequentialGroup()
                .addComponent(jLabel27)
                .addGap(0, 0, 0)
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel26)
                    .addComponent(lblErrorPicPath, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0)
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPicPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnChoose, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0))
        );

        jLabel25.setText("Movies");

        jScrollPane5.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        tableMovies.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableMovies.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMoviesMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(tableMovies);

        javax.swing.GroupLayout jPanel20Layout = new javax.swing.GroupLayout(jPanel20);
        jPanel20.setLayout(jPanel20Layout);
        jPanel20Layout.setHorizontalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel20Layout.createSequentialGroup()
                .addComponent(jLabel25)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 689, Short.MAX_VALUE)
        );
        jPanel20Layout.setVerticalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel20Layout.createSequentialGroup()
                .addComponent(jLabel25)
                .addGap(0, 0, 0)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE))
        );

        btnDeleteMovie.setText("Delete Movie");
        btnDeleteMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteMovieActionPerformed(evt);
            }
        });

        btnUpdateMovie.setText("Update Movie");
        btnUpdateMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateMovieActionPerformed(evt);
            }
        });

        btnAddMovie.setText("Add Movie");
        btnAddMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddMovieActionPerformed(evt);
            }
        });

        jMenu2.setText("Options");

        menuDownlaodDB.setText("Download to database");
        menuDownlaodDB.setToolTipText("");
        menuDownlaodDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuDownlaodDBActionPerformed(evt);
            }
        });
        jMenu2.add(menuDownlaodDB);

        menuClearDB.setText("Clear database");
        menuClearDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuClearDBActionPerformed(evt);
            }
        });
        jMenu2.add(menuClearDB);

        menuDownlaodXML.setText("Download XML");
        menuDownlaodXML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuDownlaodXMLActionPerformed(evt);
            }
        });
        jMenu2.add(menuDownlaodXML);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblPic, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jPanel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnUpdateMovie, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnAddMovie, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnDeleteMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)
                        .addComponent(btnAddPerson, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(btnUpdatePerson, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(btnDeletePerson, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(7, 7, 7))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4))
                        .addGap(0, 0, 0)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jScrollPane4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnAddMovie)
                                .addGap(0, 0, 0)
                                .addComponent(btnUpdateMovie))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1)))
                        .addGap(0, 0, 0)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAddPerson)
                            .addComponent(btnDeletePerson)
                            .addComponent(btnUpdatePerson)
                            .addComponent(btnDeleteMovie)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(jPanel17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(jPanel18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(jPanel19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(jPanel21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblPic, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddPersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddPersonActionPerformed
        new AddPersonDialog(this, false).setVisible(true);
    }//GEN-LAST:event_btnAddPersonActionPerformed

    private void btnUpdatePersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdatePersonActionPerformed
        if (selectedPerson != null) {
            new UpdatePersonDialog(this, false).setVisible(true);
        }
    }//GEN-LAST:event_btnUpdatePersonActionPerformed

    private void btnUpdateMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateMovieActionPerformed
        if (formValid() && selectedMovie != null) {
            try {
                Movie movie = new Movie(
                    txtTitle.getText().trim(),
                    LocalDateTime.parse(txtPubDate.getText().trim(), Movie.DATE_FORMATTER),
                    txtDescription.getText().trim(),
                    txtOrgTitle.getText().trim(),
                    Integer.parseInt(txtDuration.getText().trim()),
                    txtGenre.getText().trim(),
                    txtPicPath.getText()
                );
                
                repository.updateMovie(selectedMovie.getId(), movie);
                
                for (Person actor : actorsToAdd) {
                    repository.createActor(repository.createPerson(actor), selectedMovie.getId());
                }   

                for (Person director : directorsToAdd) {
                    repository.createDirector(repository.createPerson(director), selectedMovie.getId());
                }
                
                movieModel.setMovies(repository.selectMovies());
                clearForm();
                clearActorSets();
                clearDirectorSets();
            } catch (Exception ex) {
                Logger.getLogger(AdminFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_btnUpdateMovieActionPerformed

    private void btnAddMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddMovieActionPerformed
        if (formValid()) {
            try {
                Movie movie = new Movie(
                    txtTitle.getText().trim(),
                    LocalDateTime.parse(txtPubDate.getText().trim(), Movie.DATE_FORMATTER),
                    txtDescription.getText().trim(),
                    txtOrgTitle.getText().trim(),
                    Integer.parseInt(txtDuration.getText().trim()),
                    txtGenre.getText().trim(),
                    txtPicPath.getText()
                );
                
                int IDMovie = repository.createMovie(movie);
                
                for (Person actor : actorsToAdd) {
                    repository.createActor(repository.createPerson(actor), IDMovie);
                }   

                for (Person director : directorsToAdd) {
                    repository.createDirector(repository.createPerson(director), IDMovie);
                }
                
                movieModel.setMovies(repository.selectMovies());
                clearForm();
                clearActorSets();
                clearDirectorSets();
            } catch (Exception ex) {
                Logger.getLogger(AdminFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_btnAddMovieActionPerformed

    private void btnDeleteMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteMovieActionPerformed
        if (selectedMovie != null) {
            try {
                repository.deleteMovie(selectedMovie.getId());
                deleteFile(selectedMovie.getPicturePath());
                movieModel.setMovies(repository.selectMovies());
                clearForm();
                clearActorSets();
                clearDirectorSets();
            } catch (Exception ex) {
                Logger.getLogger(AdminFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnDeleteMovieActionPerformed

    private void btnDeletePersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeletePersonActionPerformed
        if (selectedPerson != null) {
            try {
                repository.deletePerson(selectedPerson.getId());
                
                movieModel.setMovies(repository.selectMovies());
                clearForm();
                clearActorSets();
                clearDirectorSets();
                loadPersons();
                selectedPerson = null;
            } catch (Exception ex) {
                Logger.getLogger(AdminFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnDeletePersonActionPerformed

    private void btnChooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseActionPerformed
        Optional<File> file = FileUtils.uploadFile("Images", "jpg", "jpeg", "png");
        if (!file.isPresent()) {
            return;
        }
        txtPicPath.setText(file.get().getAbsolutePath());
        setIcon(lblPic, file.get());
    }//GEN-LAST:event_btnChooseActionPerformed

    private void listActorsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listActorsMouseClicked
        if (selectedMovie != null) {
            selectedActor = listActors.getSelectedValue();
            if (selectedMovie.getId() != 0) {
                try {
                    repository.deleteActor(selectedActor.getId(), selectedMovie.getId());
                } catch (Exception ex) {
                    Logger.getLogger(AdminFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                loadActors();
            }
        }
    }//GEN-LAST:event_listActorsMouseClicked

    private void listDirectorsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listDirectorsMouseClicked
        if (selectedMovie != null) {
            selectedDirector = listDirectors.getSelectedValue();
            if (selectedMovie.getId() != 0) {
                try {
                    repository.deleteDirector(selectedDirector.getId(), selectedMovie.getId());
                } catch (Exception ex) {
                    Logger.getLogger(AdminFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                loadDirectors();
            }
        }
    }//GEN-LAST:event_listDirectorsMouseClicked

    private void listPersonsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listPersonsMouseClicked
        selectedPerson = listPersons.getSelectedValue();
    }//GEN-LAST:event_listPersonsMouseClicked

    private void menuDownlaodDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuDownlaodDBActionPerformed
        try {
            List<Movie> movies=MovieParser.parse();
            repository.createMovies(movies);
            load();
        } catch (IOException | XMLStreamException | ParseException ex) {
            Logger.getLogger(AdminFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(AdminFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_menuDownlaodDBActionPerformed

    private void tableMoviesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMoviesMouseClicked
        clearForm();
        int realRowIndex = tableMovies.convertRowIndexToModel(tableMovies.getSelectedRow());

        int id = (int) movieModel.getValueAt(realRowIndex, 0);
        try {
            Movie movie = repository.selectMovie(id);
            if (movie != null) {
                selectedMovie = movie;
                loadMovie();
            }
        } catch (Exception ex) {
            Logger.getLogger(AdminFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_tableMoviesMouseClicked

    private void menuClearDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuClearDBActionPerformed
        try {
            repository.deleteMovies();
            load();
            clearForm();
            clearActorSets();
            clearDirectorSets();
            deleteFile(MovieParser.DIR);
        } catch (Exception ex) {
            Logger.getLogger(AdminFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_menuClearDBActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        selectedMovie = null;
        clearForm();
    }//GEN-LAST:event_btnClearActionPerformed

    private void menuDownlaodXMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuDownlaodXMLActionPerformed
        try {
            JAXBUtils.save(new MovieArchive(repository.selectMovies()), FILENAME);
            MessageUtils.showInformationMessage("Info", "Movies saved");
        } catch (JAXBException ex) {
            MessageUtils.showErrorMessage("Error", "Unable to save movies");
            Logger.getLogger(AdminFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(AdminFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_menuDownlaodXMLActionPerformed
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddMovie;
    private javax.swing.JButton btnAddPerson;
    private javax.swing.JButton btnChoose;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDeleteMovie;
    private javax.swing.JButton btnDeletePerson;
    private javax.swing.JButton btnUpdateMovie;
    private javax.swing.JButton btnUpdatePerson;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLabel lblErrorDuration;
    private javax.swing.JLabel lblErrorGenre;
    private javax.swing.JLabel lblErrorOrgTitle;
    private javax.swing.JLabel lblErrorPicPath;
    private javax.swing.JLabel lblErrorPubDate;
    private javax.swing.JLabel lblErrorTitle;
    private javax.swing.JLabel lblPic;
    private javax.swing.JList<Person> listActors;
    private javax.swing.JList<Person> listDirectors;
    private javax.swing.JList<Person> listPersons;
    private javax.swing.JMenuItem menuClearDB;
    private javax.swing.JMenuItem menuDownlaodDB;
    private javax.swing.JMenuItem menuDownlaodXML;
    private javax.swing.JTable tableMovies;
    private javax.swing.JTextArea txtDescription;
    private javax.swing.JTextField txtDuration;
    private javax.swing.JTextField txtGenre;
    private javax.swing.JTextField txtOrgTitle;
    private javax.swing.JTextField txtPicPath;
    private javax.swing.JTextField txtPubDate;
    private javax.swing.JTextField txtTitle;
    // End of variables declaration//GEN-END:variables

    private void init() {
        initValidation();
        initDragNDrop();
        initRepository();
        initPersons();
        initActors();
        initDirectors();
        load();
    }

    private void initValidation() {
        validationFields = Arrays.asList(txtTitle, txtOrgTitle, txtPubDate, txtGenre, txtDuration, txtPicPath);
        errorLabels = Arrays.asList(lblErrorTitle, lblErrorOrgTitle, lblErrorPubDate, lblErrorGenre, lblErrorDuration, lblErrorPicPath);
    }
    
    private void initDragNDrop() {
        listPersons.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        listPersons.setDragEnabled(true);
        listPersons.setTransferHandler(new ExportPersonTransferHandler());

        listActors.setDropMode(DropMode.ON);
        listActors.setTransferHandler(new ImportActorTransferHandler());
        
        listDirectors.setDropMode(DropMode.ON);
        listDirectors.setTransferHandler(new ImportDirectorTransferHandler());
    }
    
    private void initRepository() {
        repository = RepositoryFactory.getRepository();
    }
    
    private void clearActorSets() {
        actorsToAdd.clear();
    }
    
    private void clearDirectorSets() {
        directorsToAdd.clear();
    }

    private void initPersons() {
        personsModel = new DefaultListModel<>();
        listPersons.setModel(personsModel);
    }

    private void initActors() {
        actorsToAdd = new HashSet<>();
        actorsModel = new DefaultListModel<>();
        listActors.setModel(actorsModel);
    }

    private void initDirectors() {
        directorsToAdd = new HashSet<>();
        directorsModel = new DefaultListModel<>();
        listDirectors.setModel(directorsModel);
    }
    
    private class ExportPersonTransferHandler extends TransferHandler {

        @Override
        public int getSourceActions(JComponent c) {
            // defines icon shown in target before drop
            return COPY;
            //return MOVE;
        }

        @Override
        public Transferable createTransferable(JComponent c) {
            return new PersonTransferable(listPersons.getSelectedValue());
        }
    }

    private class ImportActorTransferHandler extends TransferHandler {

        // we define whether we can import stringFlavor that we need for JList<String>
        @Override
        public boolean canImport(TransferHandler.TransferSupport support) {
            return support.isDataFlavorSupported(PersonTransferable.PERSON_FLAVOR);
        }

    // we import the data
    @Override
    public boolean importData(TransferHandler.TransferSupport support) {
        Transferable transferable = support.getTransferable();
        try {
            Person data = (Person) transferable.getTransferData(PersonTransferable.PERSON_FLAVOR);

            if (!actorsModel.contains(data) && selectedMovie != null) {
                actorsModel.addElement((Person) data);
                actorsToAdd.add(data);
                return true;
            }

        } catch (UnsupportedFlavorException | IOException ex) {
            Logger.getLogger(AdminFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        return false;

    }
        
    }
    
        private class ImportDirectorTransferHandler extends TransferHandler {

        // we define whether we can import stringFlavor that we need for JList<String>
        @Override
        public boolean canImport(TransferHandler.TransferSupport support) {
            return support.isDataFlavorSupported(PersonTransferable.PERSON_FLAVOR);
        }

        // we import the data
        @Override
        public boolean importData(TransferHandler.TransferSupport support) {
            Transferable transferable = support.getTransferable();
            try {
                Person data = (Person) transferable.getTransferData(PersonTransferable.PERSON_FLAVOR);

                if (!directorsModel.contains(data) && selectedMovie != null) {
                    directorsModel.addElement((Person) data);
                    directorsToAdd.add(data);
                    return true;
                }

            } catch (UnsupportedFlavorException | IOException ex) {
                Logger.getLogger(AdminFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            return false;
            
        }
    }
        
    private boolean formValid() {
        boolean ok = true;
        for (int i = 0; i < validationFields.size(); i++) {
            ok &= !validationFields.get(i).getText().trim().isEmpty();
            errorLabels.get(i).setText(validationFields.get(i).getText().trim().isEmpty() ? "X" : "");
        }
        return ok;
    }
    
    private void setIcon(JLabel label, File file) {
        try {
            label.setIcon(IconUtils.createIcon(file, label.getWidth(), label.getHeight()));
        } catch (IOException ex) {
            Logger.getLogger(AdminFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void clearForm() {
        validationFields.forEach(e -> e.setText(""));
        errorLabels.forEach(e -> e.setText(""));
        txtPubDate.setText("");
        txtDescription.setText("");
        selectedMovie = null;
        lblPic.setIcon(null);
        actorsModel.clear();
        directorsModel.clear();
        listActors.setModel(actorsModel);
        listDirectors.setModel(directorsModel);
    }
    
    private void load() {
        loadPersons();
        loadMovies();
    }
    
    private void loadMovies() {
        try {
            tableMovies.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            tableMovies.setAutoCreateRowSorter(true);
            tableMovies.setRowHeight(25);
            movieModel = new MovieTableModel(repository.selectMovies());
            tableMovies.setModel(movieModel);
        } catch (Exception ex) {
            Logger.getLogger(AdminFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void loadMovie() {
        if (selectedMovie.getPicturePath() != null && Files.exists(Paths.get(selectedMovie.getPicturePath()))) {
            txtPicPath.setText(selectedMovie.getPicturePath());
            setIcon(lblPic, new File(selectedMovie.getPicturePath()));
        } else {
            txtPicPath.setText("");
            setIcon(lblPic, new File(DEFAULT_PICTURE_PATH));
        }
        txtTitle.setText(selectedMovie.getTitle());
        txtOrgTitle.setText(selectedMovie.getOrgTitle());
        txtDescription.setText(selectedMovie.getDescription());
        txtPubDate.setText(selectedMovie.getPublishedDate().format(Movie.DATE_FORMATTER));
        txtGenre.setText(selectedMovie.getGenres());
        txtDuration.setText(String.valueOf(selectedMovie.getDuration()));

        if (selectedMovie.getPicturePath() != null && Files.exists(Paths.get(selectedMovie.getPicturePath()))) {
            try {
                txtPicPath.setText(selectedMovie.getPicturePath());
                lblPic.setIcon(IconUtils.createIcon(new File(selectedMovie.getPicturePath()), lblPic.getWidth(), lblPic.getHeight()));
            } catch (IOException ex) {
                Logger.getLogger(AdminFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        loadActors();
        loadDirectors();

    }
    
    void loadPersons() {
        try {
            List<Person> persons = repository.selectPersons();
            personsModel.clear();
            persons.forEach(person -> personsModel.addElement(person));
            listPersons.setModel(personsModel);
        } catch (Exception ex) {
            Logger.getLogger(AdminFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void loadActors() {
        try {
            List<Person> actors = repository.selectActors(selectedMovie.getId());
            actorsModel.clear();
            actors.forEach(actor -> actorsModel.addElement(actor));
            listActors.setModel(actorsModel);
        } catch (Exception ex) {
            Logger.getLogger(AdminFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
        
    private void loadDirectors() {
        try {
            List<Person> directors = repository.selectDirectors(selectedMovie.getId());
            directorsModel.clear();
            directors.forEach(director -> directorsModel.addElement(director));
            listDirectors.setModel(directorsModel);
        } catch (Exception ex) {
            Logger.getLogger(AdminFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void deleteFile(String fileName) {
        
        File file  = new File(fileName);
        if(file.isDirectory()){
            String[] childFiles = file.list();
            if(childFiles == null) {
                file.delete();
            }
            else {
                for (String childFilePath :  childFiles) {
                    deleteFile(fileName + File.separator + childFilePath);
                }
            }
        }
        else {
            file.delete();
        }
    }
    
    Person getSelectedPerson(){
        return selectedPerson;
    }
    
    void setSelectedPerson(Person person){
        selectedPerson = person;
    }

    Repository getRepository(){
        return repository;
    }
}
